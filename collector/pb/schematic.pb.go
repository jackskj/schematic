// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/schematic.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Schema struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	FileDescriptor       []byte   `protobuf:"bytes,3,opt,name=file_descriptor,json=fileDescriptor,proto3" json:"file_descriptor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_638a51cf2cdb86b5, []int{0}
}

func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Schema) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Schema) GetFileDescriptor() []byte {
	if m != nil {
		return m.FileDescriptor
	}
	return nil
}

type SchemaReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaReq) Reset()         { *m = SchemaReq{} }
func (m *SchemaReq) String() string { return proto.CompactTextString(m) }
func (*SchemaReq) ProtoMessage()    {}
func (*SchemaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_638a51cf2cdb86b5, []int{1}
}

func (m *SchemaReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaReq.Unmarshal(m, b)
}
func (m *SchemaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaReq.Marshal(b, m, deterministic)
}
func (m *SchemaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaReq.Merge(m, src)
}
func (m *SchemaReq) XXX_Size() int {
	return xxx_messageInfo_SchemaReq.Size(m)
}
func (m *SchemaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaReq.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaReq proto.InternalMessageInfo

func (m *SchemaReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SchemaReq) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_638a51cf2cdb86b5, []int{2}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Schema)(nil), "pb.Schema")
	proto.RegisterType((*SchemaReq)(nil), "pb.SchemaReq")
	proto.RegisterType((*EmptyResponse)(nil), "pb.EmptyResponse")
}

func init() { proto.RegisterFile("pb/schematic.proto", fileDescriptor_638a51cf2cdb86b5) }

var fileDescriptor_638a51cf2cdb86b5 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4b, 0xc5, 0x30,
	0x10, 0xc4, 0x5f, 0x9f, 0xf8, 0xa4, 0x8b, 0x6d, 0x31, 0x78, 0x08, 0x3d, 0x95, 0x5c, 0xec, 0xa9,
	0xa2, 0x1e, 0xbd, 0x2a, 0xde, 0xe3, 0x07, 0x90, 0x26, 0xae, 0x36, 0x60, 0x9b, 0x6d, 0xb2, 0x08,
	0x7e, 0x7b, 0xe9, 0x3f, 0xff, 0x1c, 0xdf, 0x6d, 0xe6, 0xc7, 0x4c, 0x86, 0x2c, 0x08, 0x32, 0xd7,
	0xd1, 0x76, 0xd8, 0xb7, 0xec, 0x6c, 0x43, 0xc1, 0xb3, 0x17, 0x7b, 0x32, 0xaa, 0x85, 0xc3, 0xf3,
	0x8c, 0xc5, 0x25, 0x9c, 0xb2, 0x27, 0x67, 0x65, 0x52, 0x25, 0x75, 0xaa, 0x17, 0x23, 0x24, 0x9c,
	0x7d, 0x62, 0x88, 0xce, 0x0f, 0x72, 0x3f, 0xf3, 0xcd, 0x8a, 0x2b, 0x28, 0xde, 0xdc, 0x07, 0xbe,
	0xbc, 0x62, 0xb4, 0xc1, 0x11, 0xfb, 0x20, 0x4f, 0xaa, 0xa4, 0x3e, 0xd7, 0xf9, 0x84, 0x1f, 0x7e,
	0xa8, 0xba, 0x87, 0x74, 0x99, 0xd0, 0x38, 0x1e, 0xbb, 0xa2, 0x0a, 0xc8, 0x1e, 0x7b, 0xe2, 0x2f,
	0x8d, 0x91, 0xfc, 0x10, 0xf1, 0xb6, 0xdb, 0x5e, 0x63, 0x67, 0xc5, 0x0d, 0xe4, 0x1a, 0xdf, 0x5d,
	0x64, 0x0c, 0xeb, 0x2f, 0xa0, 0x21, 0xd3, 0x2c, 0xba, 0xbc, 0x98, 0xf4, 0xbf, 0xb6, 0xda, 0x89,
	0x1a, 0xd2, 0x27, 0xe4, 0x35, 0x9d, 0xfd, 0xa6, 0x35, 0x8e, 0xe5, 0x9f, 0xb2, 0xda, 0x99, 0xc3,
	0x7c, 0xa5, 0xbb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x61, 0x0d, 0x48, 0x3b, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchematicClient is the client API for Schematic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchematicClient interface {
	RegisterSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetSchema(ctx context.Context, in *SchemaReq, opts ...grpc.CallOption) (*Schema, error)
}

type schematicClient struct {
	cc *grpc.ClientConn
}

func NewSchematicClient(cc *grpc.ClientConn) SchematicClient {
	return &schematicClient{cc}
}

func (c *schematicClient) RegisterSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.Schematic/RegisterSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schematicClient) GetSchema(ctx context.Context, in *SchemaReq, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/pb.Schematic/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchematicServer is the server API for Schematic service.
type SchematicServer interface {
	RegisterSchema(context.Context, *Schema) (*EmptyResponse, error)
	GetSchema(context.Context, *SchemaReq) (*Schema, error)
}

// UnimplementedSchematicServer can be embedded to have forward compatible implementations.
type UnimplementedSchematicServer struct {
}

func (*UnimplementedSchematicServer) RegisterSchema(ctx context.Context, req *Schema) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSchema not implemented")
}
func (*UnimplementedSchematicServer) GetSchema(ctx context.Context, req *SchemaReq) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}

func RegisterSchematicServer(s *grpc.Server, srv SchematicServer) {
	s.RegisterService(&_Schematic_serviceDesc, srv)
}

func _Schematic_RegisterSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchematicServer).RegisterSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Schematic/RegisterSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchematicServer).RegisterSchema(ctx, req.(*Schema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schematic_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchematicServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Schematic/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchematicServer).GetSchema(ctx, req.(*SchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schematic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Schematic",
	HandlerType: (*SchematicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSchema",
			Handler:    _Schematic_RegisterSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Schematic_GetSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/schematic.proto",
}
