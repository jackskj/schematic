// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/collector.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9dc61251a437c0a, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Record) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Record) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Acknowlage
type Ack struct {
	Ack                  bool     `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9dc61251a437c0a, []int{1}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func init() {
	proto.RegisterType((*Record)(nil), "pb.Record")
	proto.RegisterType((*Ack)(nil), "pb.Ack")
}

func init() { proto.RegisterFile("pb/collector.proto", fileDescriptor_b9dc61251a437c0a) }

var fileDescriptor_b9dc61251a437c0a = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x4f,
	0xce, 0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x52, 0x0a, 0xe2, 0x62, 0x0b, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0x11, 0x12, 0xe1, 0x62,
	0x2d, 0xc9, 0x2f, 0xc8, 0x4c, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x24,
	0xb8, 0xd8, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0xe2, 0x30, 0x2e, 0x48,
	0xa6, 0x20, 0xb1, 0x32, 0x27, 0x3f, 0x31, 0x45, 0x82, 0x59, 0x81, 0x51, 0x83, 0x27, 0x08, 0xc6,
	0x55, 0x12, 0xe7, 0x62, 0x76, 0x4c, 0xce, 0x16, 0x12, 0xe0, 0x62, 0x4e, 0x4c, 0xce, 0x06, 0x1b,
	0xc7, 0x11, 0x04, 0x62, 0x1a, 0x45, 0x72, 0x71, 0x3a, 0xc3, 0xdc, 0x20, 0xa4, 0xc1, 0xc5, 0x1b,
	0x5c, 0x52, 0x94, 0x9a, 0x98, 0x0b, 0xb1, 0xbf, 0x58, 0x88, 0x4b, 0xaf, 0x20, 0x49, 0x0f, 0xc2,
	0x91, 0x62, 0x07, 0xb1, 0x1d, 0x93, 0xb3, 0x95, 0x18, 0x34, 0x18, 0x85, 0x94, 0xb8, 0x38, 0x03,
	0x4a, 0x4b, 0xa0, 0xce, 0xc4, 0xae, 0x2a, 0x89, 0x0d, 0xec, 0x25, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x4a, 0x1a, 0x6e, 0x9d, 0xe8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	StreamRecords(ctx context.Context, opts ...grpc.CallOption) (Collector_StreamRecordsClient, error)
	PutRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) StreamRecords(ctx context.Context, opts ...grpc.CallOption) (Collector_StreamRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[0], "/pb.Collector/StreamRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorStreamRecordsClient{stream}
	return x, nil
}

type Collector_StreamRecordsClient interface {
	Send(*Record) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type collectorStreamRecordsClient struct {
	grpc.ClientStream
}

func (x *collectorStreamRecordsClient) Send(m *Record) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorStreamRecordsClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) PutRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/pb.Collector/PutRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	StreamRecords(Collector_StreamRecordsServer) error
	PutRecord(context.Context, *Record) (*Ack, error)
}

// UnimplementedCollectorServer can be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (*UnimplementedCollectorServer) StreamRecords(srv Collector_StreamRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRecords not implemented")
}
func (*UnimplementedCollectorServer) PutRecord(ctx context.Context, req *Record) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRecord not implemented")
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_StreamRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).StreamRecords(&collectorStreamRecordsServer{stream})
}

type Collector_StreamRecordsServer interface {
	SendAndClose(*Ack) error
	Recv() (*Record, error)
	grpc.ServerStream
}

type collectorStreamRecordsServer struct {
	grpc.ServerStream
}

func (x *collectorStreamRecordsServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorStreamRecordsServer) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collector_PutRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).PutRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Collector/PutRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).PutRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRecord",
			Handler:    _Collector_PutRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRecords",
			Handler:       _Collector_StreamRecords_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/collector.proto",
}
