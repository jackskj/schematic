// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/biometrics.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///  Sample message to be sent from an apple watch over grpc to the collector
struct Pb_Biometrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var watchID: Int32 = 0

  var userName: String = String()

  var heartbeat: Int32 = 0

  var temperature: Int32 = 0

  var latitude: Float = 0

  var longitude: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_Biometrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Biometrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "watch_id"),
    2: .standard(proto: "user_name"),
    3: .same(proto: "heartbeat"),
    4: .same(proto: "temperature"),
    5: .same(proto: "latitude"),
    6: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.watchID)
      case 2: try decoder.decodeSingularStringField(value: &self.userName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.heartbeat)
      case 4: try decoder.decodeSingularInt32Field(value: &self.temperature)
      case 5: try decoder.decodeSingularFloatField(value: &self.latitude)
      case 6: try decoder.decodeSingularFloatField(value: &self.longitude)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.watchID != 0 {
      try visitor.visitSingularInt32Field(value: self.watchID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if self.heartbeat != 0 {
      try visitor.visitSingularInt32Field(value: self.heartbeat, fieldNumber: 3)
    }
    if self.temperature != 0 {
      try visitor.visitSingularInt32Field(value: self.temperature, fieldNumber: 4)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 5)
    }
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Biometrics, rhs: Pb_Biometrics) -> Bool {
    if lhs.watchID != rhs.watchID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.heartbeat != rhs.heartbeat {return false}
    if lhs.temperature != rhs.temperature {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
